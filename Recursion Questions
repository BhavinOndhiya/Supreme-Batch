//Factorial

#include <iostream>
using namespace std;

int factorial(int n) {

	//base case
	if(n == 1)
		return 1;

	int chotiProblemAns = factorial(n-1);
	int badiProblemAns = n * chotiProblemAns;

	return badiProblemAns;
}

int main() {

	int n;
	cout << "Enter the value of n  " << endl;
	cin >> n;

	int ans  = factorial(n);

	cout << "Answer is: " << ans << endl;

	return 0;
}

//Print Counting

#include <iostream>
using namespace std;

void printCounting(int n) {
	//base case
	if(n == 0) {
		return;
	}

	//processing
	cout << n << " ";
	

	//re4ciursive relation
	printCounting(n-1);	
}

int main() {

	int n;
	cout << "Enter the value of n  " << endl;
	cin >> n;

	printCounting(n);
	cout << endl;

	return 0;
}

//Nth Term

#include <iostream>
using namespace std;

int fib(int n) {
	//base case
	if(n == 1) {
		//first term 
		return 0;
	}
	if(n == 2) {
		//second term
		return 1;
	}

	//RR -> f(n) = f(n-1) + f(n-2)
	int ans = fib(n-1) + fib(n-2);
	return ans;
}

int main() {

	int n;
	cout << "Enter the term you want to see" << endl;
	cin >> n;

	int ans = fib(n);
	cout << n <<"th term is: " << ans << endl; 
//Finding Key

#include <iostream>
#include<vector>
using namespace std;

void checkKey(string& str,int i, int& n, char& key, int& count) {
        //base case
        if(i >= n) {
                //key not found
                return ;
        }
        //1 case solve krdo
        if(str[i] == key) {
                ///store in vector
              //ans.push_back(i);
              count++;
        }
               
        //baaki recursion sambhal lega
        checkKey(str, i+1, n, key, count);
}

int main() {
        string str = "lovebabbar";
        int n = str.length();

        char key = 'b';

        int i = 0;
        //vector<int> ans;
        int count = 0;

        checkKey(str,i, n, key, count);
        cout << count << endl;
        cout << "printing ans" << endl;
        for(auto val: ans) {
                cout << val << " " ;
        }
        cout << endl;

        return 0;
}
	return 0;
}


//Find Min and Max Function

#include <iostream>
#include<limits.h>
using namespace std;

void findMax(int arr[], int n, int i, int& maxi) {
        //base case
        if(i >= n) {
                //array agar khtam hogya, poora traverse hogya
                //toh wapas aajao
                return;
        }

        //1 case solve krna h 
        //current element ko cjheck karo for max
        if(arr[i] > maxi) {
                maxi = arr[i];
        }

        //baaki recursion sambhal lega
        findMax(arr, n, i+1, maxi);
}


void findMin(int arr[], int n, int i, int& mini ){
        //base case
        if( i >= n) {
                return;
        }


        //1 case solve krna padega
        mini = min(mini, arr[i]);


        //baaki recursion sambhal lega
        findMin(arr, n, i+1, mini);

}

int main() {

        int arr[] = {10,30,21,44,32,6,19,66};
        int n = 8;

        int maxi = INT_MIN;
        int mini = INT_MAX;

        int i = 0;
        findMax(arr, n,i, maxi);
        findMin(arr, n, i, mini);
        cout << "maximum number is: "<< maxi << endl;
        cout << "minimum number is: "<< mini << endl;
  return 0;
}
